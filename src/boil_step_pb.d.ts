//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.9.0
// @generated from file beerproto/v1/boil_step.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AcidityType, GravityType, TemperatureType, TimeType } from "./measureable_units_pb.js";

/**
 * @generated from enum beerproto.v1.BoilStepTypeChillingType
 */
export declare enum BoilStepTypeChillingType {
  /**
   * @generated from enum value: BOIL_STEP_TYPE_CHILLING_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * batch
   *
   * @generated from enum value: BOIL_STEP_TYPE_CHILLING_TYPE_BATCH = 1;
   */
  BATCH = 1,

  /**
   * inline
   *
   * @generated from enum value: BOIL_STEP_TYPE_CHILLING_TYPE_INLINE = 2;
   */
  INLINE = 2,
}

/**
 * BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling
 *
 * @generated from message beerproto.v1.BoilStepType
 */
export declare class BoilStepType extends Message<BoilStepType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: beerproto.v1.GravityType end_gravity = 2;
   */
  endGravity?: GravityType;

  /**
   * @generated from field: beerproto.v1.BoilStepTypeChillingType chilling_type = 3;
   */
  chillingType: BoilStepTypeChillingType;

  /**
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * @generated from field: beerproto.v1.TemperatureType end_temperature = 5;
   */
  endTemperature?: TemperatureType;

  /**
   * The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
   *
   * @generated from field: beerproto.v1.TimeType ramp_time = 6;
   */
  rampTime?: TimeType;

  /**
   * @generated from field: beerproto.v1.TimeType step_time = 7;
   */
  stepTime?: TimeType;

  /**
   * @generated from field: beerproto.v1.GravityType start_gravity = 8;
   */
  startGravity?: GravityType;

  /**
   * @generated from field: beerproto.v1.AcidityType start_ph = 9;
   */
  startPh?: AcidityType;

  /**
   * @generated from field: beerproto.v1.AcidityType end_ph = 10;
   */
  endPh?: AcidityType;

  /**
   * @generated from field: string name = 11;
   */
  name: string;

  /**
   * @generated from field: beerproto.v1.TemperatureType start_temperature = 12;
   */
  startTemperature?: TemperatureType;

  constructor(data?: PartialMessage<BoilStepType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.BoilStepType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoilStepType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoilStepType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoilStepType;

  static equals(a: BoilStepType | PlainMessage<BoilStepType> | undefined, b: BoilStepType | PlainMessage<BoilStepType> | undefined): boolean;
}

