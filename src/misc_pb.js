//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.3.1
// @generated from file beerproto/v1/misc.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { TimingType } from "./timing_pb.js";
import { MassType, UnitType, VolumeType } from "./measureable_units_pb.js";

/**
 * @generated from enum beerproto.v1.MiscellaneousBaseType
 */
export const MiscellaneousBaseType = proto3.makeEnum(
  "beerproto.v1.MiscellaneousBaseType",
  [
    {no: 0, name: "MISCELLANEOUS_BASE_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "MISCELLANEOUS_BASE_TYPE_SPICE", localName: "SPICE"},
    {no: 2, name: "MISCELLANEOUS_BASE_TYPE_FINING", localName: "FINING"},
    {no: 3, name: "MISCELLANEOUS_BASE_TYPE_WATER_AGENT", localName: "WATER_AGENT"},
    {no: 4, name: "MISCELLANEOUS_BASE_TYPE_HERB", localName: "HERB"},
    {no: 5, name: "MISCELLANEOUS_BASE_TYPE_FLAVOR", localName: "FLAVOR"},
    {no: 6, name: "MISCELLANEOUS_BASE_TYPE_WOOD", localName: "WOOD"},
    {no: 7, name: "MISCELLANEOUS_BASE_TYPE_OTHER", localName: "OTHER"},
  ],
);

/**
 * MiscellaneousType collects the attributes of an ingredient to store as record information
 *
 * @generated from message beerproto.v1.MiscellaneousType
 */
export const MiscellaneousType = proto3.makeMessageType(
  "beerproto.v1.MiscellaneousType",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "use_for", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "notes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "producer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "type", kind: "enum", T: proto3.getEnumType(MiscellaneousBaseType) },
    { no: 8, name: "inventory", kind: "message", T: MiscellaneousInventoryType },
  ],
);

/**
 * MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
 *
 * @generated from message beerproto.v1.MiscellaneousAdditionType
 */
export const MiscellaneousAdditionType = proto3.makeMessageType(
  "beerproto.v1.MiscellaneousAdditionType",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "producer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "timing", kind: "message", T: TimingType },
    { no: 5, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "type", kind: "enum", T: proto3.getEnumType(MiscellaneousBaseType) },
    { no: 7, name: "mass", kind: "message", T: MassType, oneof: "amount" },
    { no: 8, name: "unit", kind: "message", T: UnitType, oneof: "amount" },
    { no: 9, name: "volume", kind: "message", T: VolumeType, oneof: "amount" },
  ],
);

/**
 * @generated from message beerproto.v1.MiscellaneousInventoryType
 */
export const MiscellaneousInventoryType = proto3.makeMessageType(
  "beerproto.v1.MiscellaneousInventoryType",
  () => [
    { no: 1, name: "mass", kind: "message", T: MassType, oneof: "amount" },
    { no: 2, name: "unit", kind: "message", T: UnitType, oneof: "amount" },
    { no: 3, name: "volume", kind: "message", T: VolumeType, oneof: "amount" },
  ],
);

