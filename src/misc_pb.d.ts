//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.9.0
// @generated from file beerproto/v1/misc.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { TimingType } from "./timing_pb.js";
import type { MassType, UnitType, VolumeType } from "./measureable_units_pb.js";

/**
 * @generated from enum beerproto.v1.MiscellaneousBaseType
 */
export declare enum MiscellaneousBaseType {
  /**
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * spice
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_SPICE = 1;
   */
  SPICE = 1,

  /**
   * fining
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_FINING = 2;
   */
  FINING = 2,

  /**
   * water agent
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_WATER_AGENT = 3;
   */
  WATER_AGENT = 3,

  /**
   * herb
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_HERB = 4;
   */
  HERB = 4,

  /**
   * flavor
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_FLAVOR = 5;
   */
  FLAVOR = 5,

  /**
   * wood
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_WOOD = 6;
   */
  WOOD = 6,

  /**
   * other
   *
   * @generated from enum value: MISCELLANEOUS_BASE_TYPE_OTHER = 7;
   */
  OTHER = 7,
}

/**
 * MiscellaneousType collects the attributes of an ingredient to store as record information
 *
 * @generated from message beerproto.v1.MiscellaneousType
 */
export declare class MiscellaneousType extends Message<MiscellaneousType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
   *
   * @generated from field: string use_for = 2;
   */
  useFor: string;

  /**
   * @generated from field: string notes = 3;
   */
  notes: string;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: string producer = 5;
   */
  producer: string;

  /**
   * @generated from field: string product_id = 6;
   */
  productId: string;

  /**
   * @generated from field: beerproto.v1.MiscellaneousBaseType type = 7;
   */
  type: MiscellaneousBaseType;

  /**
   * @generated from field: beerproto.v1.MiscellaneousInventoryType inventory = 8;
   */
  inventory?: MiscellaneousInventoryType;

  constructor(data?: PartialMessage<MiscellaneousType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.MiscellaneousType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MiscellaneousType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MiscellaneousType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MiscellaneousType;

  static equals(a: MiscellaneousType | PlainMessage<MiscellaneousType> | undefined, b: MiscellaneousType | PlainMessage<MiscellaneousType> | undefined): boolean;
}

/**
 * MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe
 *
 * @generated from message beerproto.v1.MiscellaneousAdditionType
 */
export declare class MiscellaneousAdditionType extends Message<MiscellaneousAdditionType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string producer = 3;
   */
  producer: string;

  /**
   * The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
   *
   * @generated from field: beerproto.v1.TimingType timing = 4;
   */
  timing?: TimingType;

  /**
   * @generated from field: string product_id = 5;
   */
  productId: string;

  /**
   * @generated from field: beerproto.v1.MiscellaneousBaseType type = 6;
   */
  type: MiscellaneousBaseType;

  /**
   * @generated from oneof beerproto.v1.MiscellaneousAdditionType.amount
   */
  amount: {
    /**
     * @generated from field: beerproto.v1.MassType mass = 7;
     */
    value: MassType;
    case: "mass";
  } | {
    /**
     * @generated from field: beerproto.v1.UnitType unit = 8;
     */
    value: UnitType;
    case: "unit";
  } | {
    /**
     * @generated from field: beerproto.v1.VolumeType volume = 9;
     */
    value: VolumeType;
    case: "volume";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<MiscellaneousAdditionType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.MiscellaneousAdditionType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MiscellaneousAdditionType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MiscellaneousAdditionType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MiscellaneousAdditionType;

  static equals(a: MiscellaneousAdditionType | PlainMessage<MiscellaneousAdditionType> | undefined, b: MiscellaneousAdditionType | PlainMessage<MiscellaneousAdditionType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.MiscellaneousInventoryType
 */
export declare class MiscellaneousInventoryType extends Message<MiscellaneousInventoryType> {
  /**
   * @generated from oneof beerproto.v1.MiscellaneousInventoryType.amount
   */
  amount: {
    /**
     * @generated from field: beerproto.v1.MassType mass = 1;
     */
    value: MassType;
    case: "mass";
  } | {
    /**
     * @generated from field: beerproto.v1.UnitType unit = 2;
     */
    value: UnitType;
    case: "unit";
  } | {
    /**
     * @generated from field: beerproto.v1.VolumeType volume = 3;
     */
    value: VolumeType;
    case: "volume";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<MiscellaneousInventoryType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.MiscellaneousInventoryType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MiscellaneousInventoryType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MiscellaneousInventoryType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MiscellaneousInventoryType;

  static equals(a: MiscellaneousInventoryType | PlainMessage<MiscellaneousInventoryType> | undefined, b: MiscellaneousInventoryType | PlainMessage<MiscellaneousInventoryType> | undefined): boolean;
}

