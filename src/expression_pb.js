//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.3.1
// @generated from file beerproto/v1/expression.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum beerproto.v1.BinaryArithmetic
 */
export const BinaryArithmetic = proto3.makeEnum(
  "beerproto.v1.BinaryArithmetic",
  [
    {no: 0, name: "BINARY_ARITHMETIC_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "BINARY_ARITHMETIC_ADDITION", localName: "ADDITION"},
    {no: 2, name: "BINARY_ARITHMETIC_SUBTRACTION", localName: "SUBTRACTION"},
    {no: 3, name: "BINARY_ARITHMETIC_MULTIPLICATION", localName: "MULTIPLICATION"},
    {no: 4, name: "BINARY_ARITHMETIC_DIVISION", localName: "DIVISION"},
  ],
);

/**
 * @generated from message beerproto.v1.UnaryExpression
 */
export const UnaryExpression = proto3.makeMessageType(
  "beerproto.v1.UnaryExpression",
  () => [
    { no: 1, name: "double", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 2, name: "float", kind: "scalar", T: 2 /* ScalarType.FLOAT */, oneof: "value" },
    { no: 3, name: "int32", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 4, name: "int64", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 5, name: "uint32", kind: "scalar", T: 13 /* ScalarType.UINT32 */, oneof: "value" },
    { no: 6, name: "uint64", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "value" },
    { no: 7, name: "bool", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 8, name: "string", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 9, name: "bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
  ],
);

/**
 * @generated from message beerproto.v1.BinaryExpression
 */
export const BinaryExpression = proto3.makeMessageType(
  "beerproto.v1.BinaryExpression",
  () => [
    { no: 1, name: "operator", kind: "enum", T: proto3.getEnumType(BinaryArithmetic) },
    { no: 10, name: "binary_left", kind: "message", T: BinaryExpression, oneof: "left" },
    { no: 11, name: "unary_left", kind: "message", T: UnaryExpression, oneof: "left" },
    { no: 12, name: "value_left", kind: "message", T: ValueExpression, oneof: "left" },
    { no: 20, name: "binary_right", kind: "message", T: BinaryExpression, oneof: "right" },
    { no: 21, name: "unary_right", kind: "message", T: UnaryExpression, oneof: "right" },
    { no: 22, name: "value_right", kind: "message", T: ValueExpression, oneof: "right" },
  ],
);

/**
 * @generated from message beerproto.v1.ValueExpression
 */
export const ValueExpression = proto3.makeMessageType(
  "beerproto.v1.ValueExpression",
  [],
);

