//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.3.1
// @generated from file beerproto/v1/style.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { BitternessRangeType, CarbonationRangeType, ColorRangeType, GravityRangeType, PercentRangeType } from "./measureable_units_pb.js";

/**
 * @generated from enum beerproto.v1.StyleCategories
 */
export declare enum StyleCategories {
  /**
   * @generated from enum value: STYLE_CATEGORIES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * beer
   *
   * @generated from enum value: STYLE_CATEGORIES_BEER = 1;
   */
  BEER = 1,

  /**
   * cider
   *
   * @generated from enum value: STYLE_CATEGORIES_CIDER = 2;
   */
  CIDER = 2,

  /**
   * kombucha
   *
   * @generated from enum value: STYLE_CATEGORIES_KOMBUCHA = 3;
   */
  KOMBUCHA = 3,

  /**
   * mead
   *
   * @generated from enum value: STYLE_CATEGORIES_MEAD = 4;
   */
  MEAD = 4,

  /**
   * soda
   *
   * @generated from enum value: STYLE_CATEGORIES_SODA = 5;
   */
  SODA = 5,

  /**
   * wine
   *
   * @generated from enum value: STYLE_CATEGORIES_WINE = 6;
   */
  WINE = 6,

  /**
   * other
   *
   * @generated from enum value: STYLE_CATEGORIES_OTHER = 7;
   */
  OTHER = 7,
}

/**
 * StyleType provide information for Style categorization
 *
 * @generated from message beerproto.v1.StyleType
 */
export declare class StyleType extends Message<StyleType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string aroma = 2;
   */
  aroma: string;

  /**
   * @generated from field: string ingredients = 3;
   */
  ingredients: string;

  /**
   * @generated from field: int32 category_number = 4;
   */
  categoryNumber: number;

  /**
   * @generated from field: string notes = 5;
   */
  notes: string;

  /**
   * @generated from field: string flavor = 6;
   */
  flavor: string;

  /**
   * @generated from field: string mouthfeel = 7;
   */
  mouthfeel: string;

  /**
   * @generated from field: beerproto.v1.GravityRangeType final_gravity = 8;
   */
  finalGravity?: GravityRangeType;

  /**
   * @generated from field: string style_guide = 9;
   */
  styleGuide: string;

  /**
   * @generated from field: beerproto.v1.ColorRangeType color = 10;
   */
  color?: ColorRangeType;

  /**
   * @generated from field: beerproto.v1.GravityRangeType original_gravity = 11;
   */
  originalGravity?: GravityRangeType;

  /**
   * @generated from field: string examples = 12;
   */
  examples: string;

  /**
   * @generated from field: string name = 13;
   */
  name: string;

  /**
   * @generated from field: beerproto.v1.CarbonationRangeType carbonation = 14;
   */
  carbonation?: CarbonationRangeType;

  /**
   * @generated from field: beerproto.v1.PercentRangeType alcohol_by_volume = 15;
   */
  alcoholByVolume?: PercentRangeType;

  /**
   * @generated from field: beerproto.v1.BitternessRangeType international_bitterness_units = 16;
   */
  internationalBitternessUnits?: BitternessRangeType;

  /**
   * @generated from field: string appearance = 17;
   */
  appearance: string;

  /**
   * @generated from field: string category = 18;
   */
  category: string;

  /**
   * @generated from field: string style_letter = 19;
   */
  styleLetter: string;

  /**
   * @generated from field: beerproto.v1.StyleCategories type = 20;
   */
  type: StyleCategories;

  /**
   * @generated from field: string overall_impression = 21;
   */
  overallImpression: string;

  constructor(data?: PartialMessage<StyleType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.StyleType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StyleType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StyleType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StyleType;

  static equals(a: StyleType | PlainMessage<StyleType> | undefined, b: StyleType | PlainMessage<StyleType> | undefined): boolean;
}

/**
 * RecipeStyleType defines style information stored in a recipe record
 *
 * @generated from message beerproto.v1.RecipeStyleType
 */
export declare class RecipeStyleType extends Message<RecipeStyleType> {
  /**
   * @generated from field: beerproto.v1.StyleCategories type = 1;
   */
  type: StyleCategories;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string category = 3;
   */
  category: string;

  /**
   * @generated from field: int32 category_number = 4;
   */
  categoryNumber: number;

  /**
   * @generated from field: string style_letter = 5;
   */
  styleLetter: string;

  /**
   * @generated from field: string style_guide = 6;
   */
  styleGuide: string;

  constructor(data?: PartialMessage<RecipeStyleType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.RecipeStyleType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecipeStyleType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecipeStyleType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecipeStyleType;

  static equals(a: RecipeStyleType | PlainMessage<RecipeStyleType> | undefined, b: RecipeStyleType | PlainMessage<RecipeStyleType> | undefined): boolean;
}

