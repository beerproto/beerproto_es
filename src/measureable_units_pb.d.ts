//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.3.1
// @generated from file beerproto/v1/measureable_units.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { ExpressionTree } from "./expression_pb.js";

/**
 * @generated from enum beerproto.v1.ArithmeticOperators
 */
export declare enum ArithmeticOperators {
  /**
   * @generated from enum value: ARITHMETIC_OPERATORS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ARITHMETIC_OPERATORS_ADDITION = 1;
   */
  ADDITION = 1,

  /**
   * @generated from enum value: ARITHMETIC_OPERATORS_SUBTRACTION = 2;
   */
  SUBTRACTION = 2,

  /**
   * @generated from enum value: ARITHMETIC_OPERATORS_MULTIPLICATION = 3;
   */
  MULTIPLICATION = 3,

  /**
   * @generated from enum value: ARITHMETIC_OPERATORS_DIVISION = 4;
   */
  DIVISION = 4,
}

/**
 * @generated from enum beerproto.v1.VolumeUnit
 */
export declare enum VolumeUnit {
  /**
   * @generated from enum value: VOLUME_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ml
   *
   * @generated from enum value: VOLUME_UNIT_ML = 1;
   */
  ML = 1,

  /**
   * l
   *
   * @generated from enum value: VOLUME_UNIT_L = 2;
   */
  L = 2,

  /**
   * tsp
   *
   * @generated from enum value: VOLUME_UNIT_TSP = 3;
   */
  TSP = 3,

  /**
   * tbsp
   *
   * @generated from enum value: VOLUME_UNIT_TBSP = 4;
   */
  TBSP = 4,

  /**
   * floz
   *
   * @generated from enum value: VOLUME_UNIT_FLOZ = 5;
   */
  FLOZ = 5,

  /**
   * cup
   *
   * @generated from enum value: VOLUME_UNIT_CUP = 6;
   */
  CUP = 6,

  /**
   * pt
   *
   * @generated from enum value: VOLUME_UNIT_PT = 7;
   */
  PT = 7,

  /**
   * qt
   *
   * @generated from enum value: VOLUME_UNIT_QT = 8;
   */
  QT = 8,

  /**
   * gal
   *
   * @generated from enum value: VOLUME_UNIT_GAL = 9;
   */
  GAL = 9,

  /**
   * bbl
   *
   * @generated from enum value: VOLUME_UNIT_BBL = 10;
   */
  BBL = 10,

  /**
   * ifloz
   *
   * @generated from enum value: VOLUME_UNIT_IFLOZ = 11;
   */
  IFLOZ = 11,

  /**
   * ipt
   *
   * @generated from enum value: VOLUME_UNIT_IPT = 12;
   */
  IPT = 12,

  /**
   * iqt
   *
   * @generated from enum value: VOLUME_UNIT_IQT = 13;
   */
  IQT = 13,

  /**
   * igal
   *
   * @generated from enum value: VOLUME_UNIT_IGAL = 14;
   */
  IGAL = 14,

  /**
   * ibbl
   *
   * @generated from enum value: VOLUME_UNIT_IBBL = 15;
   */
  IBBL = 15,
}

/**
 * @generated from enum beerproto.v1.MassUnit
 */
export declare enum MassUnit {
  /**
   * @generated from enum value: MASS_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * mg
   *
   * @generated from enum value: MASS_UNIT_MG = 1;
   */
  MG = 1,

  /**
   * g
   *
   * @generated from enum value: MASS_UNIT_G = 2;
   */
  G = 2,

  /**
   * kg
   *
   * @generated from enum value: MASS_UNIT_KG = 3;
   */
  KG = 3,

  /**
   * lb
   *
   * @generated from enum value: MASS_UNIT_LB = 4;
   */
  LB = 4,

  /**
   * oz
   *
   * @generated from enum value: MASS_UNIT_OZ = 5;
   */
  OZ = 5,
}

/**
 * @generated from enum beerproto.v1.DiastaticPowerUnit
 */
export declare enum DiastaticPowerUnit {
  /**
   * @generated from enum value: DIASTATIC_POWER_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Lintner
   *
   * @generated from enum value: DIASTATIC_POWER_UNIT_LINTNER = 1;
   */
  LINTNER = 1,

  /**
   * Windischâ€“Kolbach
   *
   * @generated from enum value: DIASTATIC_POWER_UNIT_WK = 2;
   */
  WK = 2,
}

/**
 * @generated from enum beerproto.v1.TemperatureUnit
 */
export declare enum TemperatureUnit {
  /**
   * @generated from enum value: TEMPERATURE_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TEMPERATURE_UNIT_C = 1;
   */
  C = 1,

  /**
   * @generated from enum value: TEMPERATURE_UNIT_F = 2;
   */
  F = 2,
}

/**
 * @generated from enum beerproto.v1.AcidityUnit
 */
export declare enum AcidityUnit {
  /**
   * @generated from enum value: ACIDITY_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACIDITY_UNIT_PH = 1;
   */
  PH = 1,
}

/**
 * @generated from enum beerproto.v1.TimeUnit
 */
export declare enum TimeUnit {
  /**
   * @generated from enum value: TIME_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * sec
   *
   * @generated from enum value: TIME_UNIT_SEC = 1;
   */
  SEC = 1,

  /**
   * min
   *
   * @generated from enum value: TIME_UNIT_MIN = 2;
   */
  MIN = 2,

  /**
   * hr
   *
   * @generated from enum value: TIME_UNIT_HR = 3;
   */
  HR = 3,

  /**
   * day
   *
   * @generated from enum value: TIME_UNIT_DAY = 4;
   */
  DAY = 4,

  /**
   * week
   *
   * @generated from enum value: TIME_UNIT_WEEK = 5;
   */
  WEEK = 5,
}

/**
 * @generated from enum beerproto.v1.ColorUnit
 */
export declare enum ColorUnit {
  /**
   * @generated from enum value: COLOR_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * EBC
   *
   * @generated from enum value: COLOR_UNIT_EBC = 1;
   */
  EBC = 1,

  /**
   * Lovi
   *
   * @generated from enum value: COLOR_UNIT_LOVI = 2;
   */
  LOVI = 2,

  /**
   * SRM
   *
   * @generated from enum value: COLOR_UNIT_SRM = 3;
   */
  SRM = 3,
}

/**
 * @generated from enum beerproto.v1.CarbonationUnit
 */
export declare enum CarbonationUnit {
  /**
   * @generated from enum value: CARBONATION_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * vols
   *
   * @generated from enum value: CARBONATION_UNIT_VOLS = 1;
   */
  VOLS = 1,

  /**
   * g/l
   *
   * @generated from enum value: CARBONATION_UNIT_GL = 2;
   */
  GL = 2,
}

/**
 * @generated from enum beerproto.v1.BitternessUnit
 */
export declare enum BitternessUnit {
  /**
   * @generated from enum value: BITTERNESS_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * IBUs
   *
   * @generated from enum value: BITTERNESS_UNIT_IBUS = 1;
   */
  IBUS = 1,
}

/**
 * @generated from enum beerproto.v1.GravityUnit
 */
export declare enum GravityUnit {
  /**
   * @generated from enum value: GRAVITY_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * sg
   *
   * @generated from enum value: GRAVITY_UNIT_SG = 1;
   */
  SG = 1,

  /**
   * plato
   *
   * @generated from enum value: GRAVITY_UNIT_PLATO = 2;
   */
  PLATO = 2,

  /**
   * brix
   *
   * @generated from enum value: GRAVITY_UNIT_BRIX = 3;
   */
  BRIX = 3,
}

/**
 * @generated from enum beerproto.v1.SpecificHeatUnit
 */
export declare enum SpecificHeatUnit {
  /**
   * @generated from enum value: SPECIFIC_HEAT_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Cal/(g C)
   *
   * @generated from enum value: SPECIFIC_HEAT_UNIT_CALGC = 1;
   */
  CALGC = 1,

  /**
   * J/(kg K)
   *
   * @generated from enum value: SPECIFIC_HEAT_UNIT_JKGK = 2;
   */
  JKGK = 2,

  /**
   * BTU/(lb F)
   *
   * @generated from enum value: SPECIFIC_HEAT_UNIT_BTULBF = 3;
   */
  BTULBF = 3,
}

/**
 * @generated from enum beerproto.v1.ConcentrationUnit
 */
export declare enum ConcentrationUnit {
  /**
   * @generated from enum value: CONCENTRATION_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * ppm
   *
   * @generated from enum value: CONCENTRATION_UNIT_PPM = 1;
   */
  PPM = 1,

  /**
   * ppb
   *
   * @generated from enum value: CONCENTRATION_UNIT_PPB = 2;
   */
  PPB = 2,

  /**
   * mg/l
   *
   * @generated from enum value: CONCENTRATION_UNIT_MGL = 3;
   */
  MGL = 3,

  /**
   * mg/100g
   *
   * @generated from enum value: CONCENTRATION_UNIT_MG100L = 4;
   */
  MG100L = 4,
}

/**
 * @generated from enum beerproto.v1.SpecificVolumeUnit
 */
export declare enum SpecificVolumeUnit {
  /**
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * qt/lb
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_QTLB = 1;
   */
  QTLB = 1,

  /**
   * gal/lb
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_GALLB = 2;
   */
  GALLB = 2,

  /**
   * gal/oz
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_GALOZ = 3;
   */
  GALOZ = 3,

  /**
   * l/g
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_LG = 4;
   */
  LG = 4,

  /**
   * l/kg
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_LKG = 5;
   */
  LKG = 5,

  /**
   * floz/oz
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_FLOZOZ = 6;
   */
  FLOZOZ = 6,

  /**
   * m^3/kg
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_M3KG = 7;
   */
  M3KG = 7,

  /**
   * ft^3/lb
   *
   * @generated from enum value: SPECIFIC_VOLUME_UNIT_FT3LB = 8;
   */
  FT3LB = 8,
}

/**
 * @generated from enum beerproto.v1.UnitUnit
 */
export declare enum UnitUnit {
  /**
   * @generated from enum value: UNIT_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 1
   *
   * @generated from enum value: UNIT_UNIT_ONE = 1;
   */
  ONE = 1,

  /**
   * unit
   *
   * @generated from enum value: UNIT_UNIT_UNIT = 2;
   */
  UNIT = 2,

  /**
   * each
   *
   * @generated from enum value: UNIT_UNIT_EACH = 3;
   */
  EACH = 3,

  /**
   * dimensionless
   *
   * @generated from enum value: UNIT_UNIT_DIMENSIONLESS = 4;
   */
  DIMENSIONLESS = 4,

  /**
   * pkg
   *
   * @generated from enum value: UNIT_UNIT_PKG = 5;
   */
  PKG = 5,
}

/**
 * @generated from enum beerproto.v1.PercentUnit
 */
export declare enum PercentUnit {
  /**
   * @generated from enum value: PERCENT_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * %
   *
   * @generated from enum value: PERCENT_UNIT_PERCENT_SIGN = 1;
   */
  PERCENT_SIGN = 1,
}

/**
 * @generated from enum beerproto.v1.ViscosityUnit
 */
export declare enum ViscosityUnit {
  /**
   * @generated from enum value: VISCOSITY_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * cP
   *
   * @generated from enum value: VISCOSITY_UNIT_CP = 1;
   */
  CP = 1,

  /**
   * mPa-s
   *
   * @generated from enum value: VISCOSITY_UNIT_MPAS = 2;
   */
  MPAS = 2,
}

/**
 * @generated from message beerproto.v1.ConversionVolumeUnit
 */
export declare class ConversionVolumeUnit extends Message<ConversionVolumeUnit> {
  /**
   * @generated from field: repeated beerproto.v1.ConversionVolumeUnit.ConversionVolumeUnitRate rates = 1;
   */
  rates: ConversionVolumeUnit_ConversionVolumeUnitRate[];

  constructor(data?: PartialMessage<ConversionVolumeUnit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConversionVolumeUnit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionVolumeUnit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionVolumeUnit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionVolumeUnit;

  static equals(a: ConversionVolumeUnit | PlainMessage<ConversionVolumeUnit> | undefined, b: ConversionVolumeUnit | PlainMessage<ConversionVolumeUnit> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConversionVolumeUnit.ConversionVolumeUnitRate
 */
export declare class ConversionVolumeUnit_ConversionVolumeUnitRate extends Message<ConversionVolumeUnit_ConversionVolumeUnitRate> {
  /**
   * @generated from field: beerproto.v1.VolumeUnit target = 1;
   */
  target: VolumeUnit;

  /**
   * @generated from field: beerproto.v1.ArithmeticOperators operator = 2;
   */
  operator: ArithmeticOperators;

  /**
   * @generated from field: double value = 3;
   */
  value: number;

  constructor(data?: PartialMessage<ConversionVolumeUnit_ConversionVolumeUnitRate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConversionVolumeUnit.ConversionVolumeUnitRate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionVolumeUnit_ConversionVolumeUnitRate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionVolumeUnit_ConversionVolumeUnitRate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionVolumeUnit_ConversionVolumeUnitRate;

  static equals(a: ConversionVolumeUnit_ConversionVolumeUnitRate | PlainMessage<ConversionVolumeUnit_ConversionVolumeUnitRate> | undefined, b: ConversionVolumeUnit_ConversionVolumeUnitRate | PlainMessage<ConversionVolumeUnit_ConversionVolumeUnitRate> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.VolumeType
 */
export declare class VolumeType extends Message<VolumeType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.VolumeUnit unit = 2;
   */
  unit: VolumeUnit;

  constructor(data?: PartialMessage<VolumeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.VolumeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VolumeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VolumeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VolumeType;

  static equals(a: VolumeType | PlainMessage<VolumeType> | undefined, b: VolumeType | PlainMessage<VolumeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.MassType
 */
export declare class MassType extends Message<MassType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.MassUnit unit = 2;
   */
  unit: MassUnit;

  constructor(data?: PartialMessage<MassType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.MassType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MassType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MassType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MassType;

  static equals(a: MassType | PlainMessage<MassType> | undefined, b: MassType | PlainMessage<MassType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConversionMassUnit
 */
export declare class ConversionMassUnit extends Message<ConversionMassUnit> {
  /**
   * @generated from field: repeated beerproto.v1.ConversionMassUnit.ConversionMassUnitRate rates = 1;
   */
  rates: ConversionMassUnit_ConversionMassUnitRate[];

  constructor(data?: PartialMessage<ConversionMassUnit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConversionMassUnit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionMassUnit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionMassUnit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionMassUnit;

  static equals(a: ConversionMassUnit | PlainMessage<ConversionMassUnit> | undefined, b: ConversionMassUnit | PlainMessage<ConversionMassUnit> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConversionMassUnit.ConversionMassUnitRate
 */
export declare class ConversionMassUnit_ConversionMassUnitRate extends Message<ConversionMassUnit_ConversionMassUnitRate> {
  /**
   * @generated from field: beerproto.v1.MassUnit target = 1;
   */
  target: MassUnit;

  /**
   * @generated from field: beerproto.v1.ArithmeticOperators operator = 2;
   */
  operator: ArithmeticOperators;

  /**
   * @generated from field: double value = 3;
   */
  value: number;

  constructor(data?: PartialMessage<ConversionMassUnit_ConversionMassUnitRate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConversionMassUnit.ConversionMassUnitRate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionMassUnit_ConversionMassUnitRate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionMassUnit_ConversionMassUnitRate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionMassUnit_ConversionMassUnitRate;

  static equals(a: ConversionMassUnit_ConversionMassUnitRate | PlainMessage<ConversionMassUnit_ConversionMassUnitRate> | undefined, b: ConversionMassUnit_ConversionMassUnitRate | PlainMessage<ConversionMassUnit_ConversionMassUnitRate> | undefined): boolean;
}

/**
 * Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts
 *
 * @generated from message beerproto.v1.DiastaticPowerType
 */
export declare class DiastaticPowerType extends Message<DiastaticPowerType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.DiastaticPowerUnit unit = 2;
   */
  unit: DiastaticPowerUnit;

  constructor(data?: PartialMessage<DiastaticPowerType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.DiastaticPowerType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiastaticPowerType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiastaticPowerType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiastaticPowerType;

  static equals(a: DiastaticPowerType | PlainMessage<DiastaticPowerType> | undefined, b: DiastaticPowerType | PlainMessage<DiastaticPowerType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConversionDiastaticPowerUnit
 */
export declare class ConversionDiastaticPowerUnit extends Message<ConversionDiastaticPowerUnit> {
  /**
   * @generated from field: repeated beerproto.v1.ConversionDiastaticPowerUnit.ConversionDiastaticPowerUnitRate rates = 1;
   */
  rates: ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate[];

  constructor(data?: PartialMessage<ConversionDiastaticPowerUnit>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConversionDiastaticPowerUnit";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionDiastaticPowerUnit;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionDiastaticPowerUnit;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionDiastaticPowerUnit;

  static equals(a: ConversionDiastaticPowerUnit | PlainMessage<ConversionDiastaticPowerUnit> | undefined, b: ConversionDiastaticPowerUnit | PlainMessage<ConversionDiastaticPowerUnit> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConversionDiastaticPowerUnit.ConversionDiastaticPowerUnitRate
 */
export declare class ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate extends Message<ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate> {
  /**
   * @generated from field: beerproto.v1.DiastaticPowerUnit target = 1;
   */
  target: DiastaticPowerUnit;

  /**
   * @generated from field: beerproto.v1.ExpressionTree tree = 2;
   */
  tree?: ExpressionTree;

  constructor(data?: PartialMessage<ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConversionDiastaticPowerUnit.ConversionDiastaticPowerUnitRate";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate;

  static equals(a: ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate | PlainMessage<ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate> | undefined, b: ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate | PlainMessage<ConversionDiastaticPowerUnit_ConversionDiastaticPowerUnitRate> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.TemperatureType
 */
export declare class TemperatureType extends Message<TemperatureType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.TemperatureUnit unit = 2;
   */
  unit: TemperatureUnit;

  constructor(data?: PartialMessage<TemperatureType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.TemperatureType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemperatureType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemperatureType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemperatureType;

  static equals(a: TemperatureType | PlainMessage<TemperatureType> | undefined, b: TemperatureType | PlainMessage<TemperatureType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.AcidityType
 */
export declare class AcidityType extends Message<AcidityType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.AcidityUnit unit = 2;
   */
  unit: AcidityUnit;

  constructor(data?: PartialMessage<AcidityType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.AcidityType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcidityType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcidityType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcidityType;

  static equals(a: AcidityType | PlainMessage<AcidityType> | undefined, b: AcidityType | PlainMessage<AcidityType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.TimeType
 */
export declare class TimeType extends Message<TimeType> {
  /**
   * @generated from field: int64 value = 1;
   */
  value: bigint;

  /**
   * @generated from field: beerproto.v1.TimeUnit unit = 2;
   */
  unit: TimeUnit;

  constructor(data?: PartialMessage<TimeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.TimeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeType;

  static equals(a: TimeType | PlainMessage<TimeType> | undefined, b: TimeType | PlainMessage<TimeType> | undefined): boolean;
}

/**
 * ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC
 *
 * @generated from message beerproto.v1.ColorType
 */
export declare class ColorType extends Message<ColorType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.ColorUnit unit = 2;
   */
  unit: ColorUnit;

  constructor(data?: PartialMessage<ColorType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ColorType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColorType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColorType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColorType;

  static equals(a: ColorType | PlainMessage<ColorType> | undefined, b: ColorType | PlainMessage<ColorType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.CarbonationType
 */
export declare class CarbonationType extends Message<CarbonationType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.CarbonationUnit unit = 2;
   */
  unit: CarbonationUnit;

  constructor(data?: PartialMessage<CarbonationType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.CarbonationType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CarbonationType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CarbonationType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CarbonationType;

  static equals(a: CarbonationType | PlainMessage<CarbonationType> | undefined, b: CarbonationType | PlainMessage<CarbonationType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.BitternessType
 */
export declare class BitternessType extends Message<BitternessType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.BitternessUnit unit = 2;
   */
  unit: BitternessUnit;

  constructor(data?: PartialMessage<BitternessType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.BitternessType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BitternessType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BitternessType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BitternessType;

  static equals(a: BitternessType | PlainMessage<BitternessType> | undefined, b: BitternessType | PlainMessage<BitternessType> | undefined): boolean;
}

/**
 * Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity
 *
 * @generated from message beerproto.v1.GravityType
 */
export declare class GravityType extends Message<GravityType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.GravityUnit unit = 2;
   */
  unit: GravityUnit;

  constructor(data?: PartialMessage<GravityType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.GravityType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GravityType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GravityType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GravityType;

  static equals(a: GravityType | PlainMessage<GravityType> | undefined, b: GravityType | PlainMessage<GravityType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.SpecificHeatType
 */
export declare class SpecificHeatType extends Message<SpecificHeatType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.SpecificHeatUnit unit = 2;
   */
  unit: SpecificHeatUnit;

  constructor(data?: PartialMessage<SpecificHeatType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.SpecificHeatType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecificHeatType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecificHeatType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecificHeatType;

  static equals(a: SpecificHeatType | PlainMessage<SpecificHeatType> | undefined, b: SpecificHeatType | PlainMessage<SpecificHeatType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConcentrationType
 */
export declare class ConcentrationType extends Message<ConcentrationType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.ConcentrationUnit unit = 2;
   */
  unit: ConcentrationUnit;

  constructor(data?: PartialMessage<ConcentrationType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConcentrationType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConcentrationType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConcentrationType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConcentrationType;

  static equals(a: ConcentrationType | PlainMessage<ConcentrationType> | undefined, b: ConcentrationType | PlainMessage<ConcentrationType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.SpecificVolumeType
 */
export declare class SpecificVolumeType extends Message<SpecificVolumeType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.SpecificVolumeUnit unit = 2;
   */
  unit: SpecificVolumeUnit;

  constructor(data?: PartialMessage<SpecificVolumeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.SpecificVolumeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecificVolumeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecificVolumeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecificVolumeType;

  static equals(a: SpecificVolumeType | PlainMessage<SpecificVolumeType> | undefined, b: SpecificVolumeType | PlainMessage<SpecificVolumeType> | undefined): boolean;
}

/**
 * UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet
 *
 * @generated from message beerproto.v1.UnitType
 */
export declare class UnitType extends Message<UnitType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.UnitUnit unit = 2;
   */
  unit: UnitUnit;

  constructor(data?: PartialMessage<UnitType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.UnitType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitType;

  static equals(a: UnitType | PlainMessage<UnitType> | undefined, b: UnitType | PlainMessage<UnitType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.PercentType
 */
export declare class PercentType extends Message<PercentType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.PercentUnit unit = 2;
   */
  unit: PercentUnit;

  constructor(data?: PartialMessage<PercentType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.PercentType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PercentType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PercentType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PercentType;

  static equals(a: PercentType | PlainMessage<PercentType> | undefined, b: PercentType | PlainMessage<PercentType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ViscosityType
 */
export declare class ViscosityType extends Message<ViscosityType> {
  /**
   * @generated from field: double value = 1;
   */
  value: number;

  /**
   * @generated from field: beerproto.v1.ViscosityUnit unit = 2;
   */
  unit: ViscosityUnit;

  constructor(data?: PartialMessage<ViscosityType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ViscosityType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViscosityType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViscosityType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViscosityType;

  static equals(a: ViscosityType | PlainMessage<ViscosityType> | undefined, b: ViscosityType | PlainMessage<ViscosityType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.CarbonationRangeType
 */
export declare class CarbonationRangeType extends Message<CarbonationRangeType> {
  /**
   * @generated from field: beerproto.v1.CarbonationType minimum = 1;
   */
  minimum?: CarbonationType;

  /**
   * @generated from field: beerproto.v1.CarbonationType maximum = 2;
   */
  maximum?: CarbonationType;

  constructor(data?: PartialMessage<CarbonationRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.CarbonationRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CarbonationRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CarbonationRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CarbonationRangeType;

  static equals(a: CarbonationRangeType | PlainMessage<CarbonationRangeType> | undefined, b: CarbonationRangeType | PlainMessage<CarbonationRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.BitternessRangeType
 */
export declare class BitternessRangeType extends Message<BitternessRangeType> {
  /**
   * @generated from field: beerproto.v1.BitternessType minimum = 1;
   */
  minimum?: BitternessType;

  /**
   * @generated from field: beerproto.v1.BitternessType maximum = 2;
   */
  maximum?: BitternessType;

  constructor(data?: PartialMessage<BitternessRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.BitternessRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BitternessRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BitternessRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BitternessRangeType;

  static equals(a: BitternessRangeType | PlainMessage<BitternessRangeType> | undefined, b: BitternessRangeType | PlainMessage<BitternessRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.TemperatureRangeType
 */
export declare class TemperatureRangeType extends Message<TemperatureRangeType> {
  /**
   * @generated from field: beerproto.v1.TemperatureType minimum = 1;
   */
  minimum?: TemperatureType;

  /**
   * @generated from field: beerproto.v1.TemperatureType maximum = 2;
   */
  maximum?: TemperatureType;

  constructor(data?: PartialMessage<TemperatureRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.TemperatureRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemperatureRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemperatureRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemperatureRangeType;

  static equals(a: TemperatureRangeType | PlainMessage<TemperatureRangeType> | undefined, b: TemperatureRangeType | PlainMessage<TemperatureRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ColorRangeType
 */
export declare class ColorRangeType extends Message<ColorRangeType> {
  /**
   * @generated from field: beerproto.v1.ColorType minimum = 1;
   */
  minimum?: ColorType;

  /**
   * @generated from field: beerproto.v1.ColorType maximum = 2;
   */
  maximum?: ColorType;

  constructor(data?: PartialMessage<ColorRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ColorRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColorRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColorRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColorRangeType;

  static equals(a: ColorRangeType | PlainMessage<ColorRangeType> | undefined, b: ColorRangeType | PlainMessage<ColorRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.GravityRangeType
 */
export declare class GravityRangeType extends Message<GravityRangeType> {
  /**
   * @generated from field: beerproto.v1.GravityType minimum = 1;
   */
  minimum?: GravityType;

  /**
   * @generated from field: beerproto.v1.GravityType maximum = 2;
   */
  maximum?: GravityType;

  constructor(data?: PartialMessage<GravityRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.GravityRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GravityRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GravityRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GravityRangeType;

  static equals(a: GravityRangeType | PlainMessage<GravityRangeType> | undefined, b: GravityRangeType | PlainMessage<GravityRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.PercentRangeType
 */
export declare class PercentRangeType extends Message<PercentRangeType> {
  /**
   * @generated from field: beerproto.v1.PercentType minimum = 1;
   */
  minimum?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType maximum = 2;
   */
  maximum?: PercentType;

  constructor(data?: PartialMessage<PercentRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.PercentRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PercentRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PercentRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PercentRangeType;

  static equals(a: PercentRangeType | PlainMessage<PercentRangeType> | undefined, b: PercentRangeType | PlainMessage<PercentRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.TimeRangeType
 */
export declare class TimeRangeType extends Message<TimeRangeType> {
  /**
   * @generated from field: beerproto.v1.TimeType minimum = 1;
   */
  minimum?: TimeType;

  /**
   * @generated from field: beerproto.v1.TimeType maximum = 2;
   */
  maximum?: TimeType;

  constructor(data?: PartialMessage<TimeRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.TimeRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRangeType;

  static equals(a: TimeRangeType | PlainMessage<TimeRangeType> | undefined, b: TimeRangeType | PlainMessage<TimeRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ViscosityRangeType
 */
export declare class ViscosityRangeType extends Message<ViscosityRangeType> {
  /**
   * @generated from field: beerproto.v1.ViscosityType minimum = 1;
   */
  minimum?: ViscosityType;

  /**
   * @generated from field: beerproto.v1.ViscosityType maximum = 2;
   */
  maximum?: ViscosityType;

  constructor(data?: PartialMessage<ViscosityRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ViscosityRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViscosityRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViscosityRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViscosityRangeType;

  static equals(a: ViscosityRangeType | PlainMessage<ViscosityRangeType> | undefined, b: ViscosityRangeType | PlainMessage<ViscosityRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.DiastaticPowerRangeType
 */
export declare class DiastaticPowerRangeType extends Message<DiastaticPowerRangeType> {
  /**
   * @generated from field: beerproto.v1.DiastaticPowerType minimum = 1;
   */
  minimum?: DiastaticPowerType;

  /**
   * @generated from field: beerproto.v1.DiastaticPowerType maximum = 2;
   */
  maximum?: DiastaticPowerType;

  constructor(data?: PartialMessage<DiastaticPowerRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.DiastaticPowerRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiastaticPowerRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiastaticPowerRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiastaticPowerRangeType;

  static equals(a: DiastaticPowerRangeType | PlainMessage<DiastaticPowerRangeType> | undefined, b: DiastaticPowerRangeType | PlainMessage<DiastaticPowerRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.SpecificVolumeRangeType
 */
export declare class SpecificVolumeRangeType extends Message<SpecificVolumeRangeType> {
  /**
   * @generated from field: beerproto.v1.SpecificVolumeType minimum = 1;
   */
  minimum?: SpecificVolumeType;

  /**
   * @generated from field: beerproto.v1.SpecificVolumeType maximum = 2;
   */
  maximum?: SpecificVolumeType;

  constructor(data?: PartialMessage<SpecificVolumeRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.SpecificVolumeRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecificVolumeRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecificVolumeRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecificVolumeRangeType;

  static equals(a: SpecificVolumeRangeType | PlainMessage<SpecificVolumeRangeType> | undefined, b: SpecificVolumeRangeType | PlainMessage<SpecificVolumeRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.AcidityRangeType
 */
export declare class AcidityRangeType extends Message<AcidityRangeType> {
  /**
   * @generated from field: beerproto.v1.AcidityType minimum = 1;
   */
  minimum?: AcidityType;

  /**
   * @generated from field: beerproto.v1.AcidityType maximum = 2;
   */
  maximum?: AcidityType;

  constructor(data?: PartialMessage<AcidityRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.AcidityRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcidityRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcidityRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcidityRangeType;

  static equals(a: AcidityRangeType | PlainMessage<AcidityRangeType> | undefined, b: AcidityRangeType | PlainMessage<AcidityRangeType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ConcentrationRangeType
 */
export declare class ConcentrationRangeType extends Message<ConcentrationRangeType> {
  /**
   * @generated from field: beerproto.v1.ConcentrationType minimum = 1;
   */
  minimum?: ConcentrationType;

  /**
   * @generated from field: beerproto.v1.ConcentrationType maximum = 2;
   */
  maximum?: ConcentrationType;

  constructor(data?: PartialMessage<ConcentrationRangeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ConcentrationRangeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConcentrationRangeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConcentrationRangeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConcentrationRangeType;

  static equals(a: ConcentrationRangeType | PlainMessage<ConcentrationRangeType> | undefined, b: ConcentrationRangeType | PlainMessage<ConcentrationRangeType> | undefined): boolean;
}

