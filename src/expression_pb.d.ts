//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.9.0
// @generated from file beerproto/v1/expression.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum beerproto.v1.BinaryArithmetic
 */
export declare enum BinaryArithmetic {
  /**
   * @generated from enum value: BINARY_ARITHMETIC_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: BINARY_ARITHMETIC_ADDITION = 1;
   */
  ADDITION = 1,

  /**
   * @generated from enum value: BINARY_ARITHMETIC_SUBTRACTION = 2;
   */
  SUBTRACTION = 2,

  /**
   * @generated from enum value: BINARY_ARITHMETIC_MULTIPLICATION = 3;
   */
  MULTIPLICATION = 3,

  /**
   * @generated from enum value: BINARY_ARITHMETIC_DIVISION = 4;
   */
  DIVISION = 4,

  /**
   * @generated from enum value: BINARY_ARITHMETIC_POWER = 5;
   */
  POWER = 5,
}

/**
 * @generated from message beerproto.v1.ExpressionTree
 */
export declare class ExpressionTree extends Message<ExpressionTree> {
  /**
   * @generated from field: beerproto.v1.BinaryExpression expression = 1;
   */
  expression?: BinaryExpression;

  constructor(data?: PartialMessage<ExpressionTree>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ExpressionTree";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExpressionTree;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExpressionTree;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExpressionTree;

  static equals(a: ExpressionTree | PlainMessage<ExpressionTree> | undefined, b: ExpressionTree | PlainMessage<ExpressionTree> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.UnaryExpression
 */
export declare class UnaryExpression extends Message<UnaryExpression> {
  /**
   * @generated from field: double double = 1;
   */
  double: number;

  constructor(data?: PartialMessage<UnaryExpression>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.UnaryExpression";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnaryExpression;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnaryExpression;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnaryExpression;

  static equals(a: UnaryExpression | PlainMessage<UnaryExpression> | undefined, b: UnaryExpression | PlainMessage<UnaryExpression> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.BinaryExpression
 */
export declare class BinaryExpression extends Message<BinaryExpression> {
  /**
   * @generated from field: beerproto.v1.BinaryArithmetic operator = 1;
   */
  operator: BinaryArithmetic;

  /**
   * @generated from oneof beerproto.v1.BinaryExpression.left
   */
  left: {
    /**
     * @generated from field: beerproto.v1.BinaryExpression binary_left = 10;
     */
    value: BinaryExpression;
    case: "binaryLeft";
  } | {
    /**
     * @generated from field: beerproto.v1.UnaryExpression unary_left = 11;
     */
    value: UnaryExpression;
    case: "unaryLeft";
  } | {
    /**
     * @generated from field: beerproto.v1.ParameterExpression parameter_left = 12;
     */
    value: ParameterExpression;
    case: "parameterLeft";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from oneof beerproto.v1.BinaryExpression.right
   */
  right: {
    /**
     * @generated from field: beerproto.v1.BinaryExpression binary_right = 20;
     */
    value: BinaryExpression;
    case: "binaryRight";
  } | {
    /**
     * @generated from field: beerproto.v1.UnaryExpression unary_right = 21;
     */
    value: UnaryExpression;
    case: "unaryRight";
  } | {
    /**
     * @generated from field: beerproto.v1.ParameterExpression parameter_right = 22;
     */
    value: ParameterExpression;
    case: "parameterRight";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<BinaryExpression>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.BinaryExpression";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BinaryExpression;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BinaryExpression;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BinaryExpression;

  static equals(a: BinaryExpression | PlainMessage<BinaryExpression> | undefined, b: BinaryExpression | PlainMessage<BinaryExpression> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.ParameterExpression
 */
export declare class ParameterExpression extends Message<ParameterExpression> {
  /**
   * @generated from field: string parameter = 1;
   */
  parameter: string;

  constructor(data?: PartialMessage<ParameterExpression>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.ParameterExpression";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParameterExpression;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParameterExpression;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParameterExpression;

  static equals(a: ParameterExpression | PlainMessage<ParameterExpression> | undefined, b: ParameterExpression | PlainMessage<ParameterExpression> | undefined): boolean;
}

