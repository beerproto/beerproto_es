//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.3.1
// @generated from file beerproto/v1/timing.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { AcidityType, GravityType, TimeType } from "./measureable_units_pb.js";

/**
 * @generated from enum beerproto.v1.UseType
 */
export const UseType = proto3.makeEnum(
  "beerproto.v1.UseType",
  [
    {no: 0, name: "USE_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "USE_TYPE_ADD_TO_MASH", localName: "ADD_TO_MASH"},
    {no: 2, name: "USE_TYPE_ADD_TO_BOIL", localName: "ADD_TO_BOIL"},
    {no: 3, name: "USE_TYPE_ADD_TO_FERMENTATION", localName: "ADD_TO_FERMENTATION"},
    {no: 4, name: "USE_TYPE_ADD_TO_PACKAGE", localName: "ADD_TO_PACKAGE"},
  ],
);

/**
 * The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step
 *
 * @generated from message beerproto.v1.TimingType
 */
export const TimingType = proto3.makeMessageType(
  "beerproto.v1.TimingType",
  () => [
    { no: 1, name: "time", kind: "message", T: TimeType },
    { no: 2, name: "duration", kind: "message", T: TimeType },
    { no: 3, name: "continuous", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "specific_gravity", kind: "message", T: GravityType },
    { no: 5, name: "ph", kind: "message", T: AcidityType },
    { no: 6, name: "step", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "use", kind: "enum", T: proto3.getEnumType(UseType) },
  ],
);

