//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.9.0
// @generated from file beerproto/v1/hop.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { MassType, PercentType, VolumeType } from "./measureable_units_pb.js";
import type { TimingType } from "./timing_pb.js";

/**
 * @generated from enum beerproto.v1.VarietyInformationType
 */
export declare enum VarietyInformationType {
  /**
   * @generated from enum value: VARIETY_INFORMATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * aroma
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_AROMA = 1;
   */
  AROMA = 1,

  /**
   * bittering
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_BITTERING = 2;
   */
  BITTERING = 2,

  /**
   * flavor
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_FLAVOR = 3;
   */
  FLAVOR = 3,

  /**
   * aroma/bittering
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_AROMA_BITTERING = 4;
   */
  AROMA_BITTERING = 4,

  /**
   * bittering/flavor
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_BITTERING_FLAVOR = 5;
   */
  BITTERING_FLAVOR = 5,

  /**
   * aroma/flavor
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_AROMA_FLAVOR = 6;
   */
  AROMA_FLAVOR = 6,

  /**
   * aroma/bittering/flavor
   *
   * @generated from enum value: VARIETY_INFORMATION_TYPE_AROMA_BITTERING_FLAVOR = 7;
   */
  AROMA_BITTERING_FLAVOR = 7,
}

/**
 * @generated from enum beerproto.v1.HopVarietyBaseForm
 */
export declare enum HopVarietyBaseForm {
  /**
   * @generated from enum value: HOP_VARIETY_BASE_FORM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * extract
   *
   * @generated from enum value: HOP_VARIETY_BASE_FORM_EXTRACT = 1;
   */
  EXTRACT = 1,

  /**
   * leaf
   *
   * @generated from enum value: HOP_VARIETY_BASE_FORM_LEAF = 2;
   */
  LEAF = 2,

  /**
   * leaf (wet)
   *
   * @generated from enum value: HOP_VARIETY_BASE_FORM_LEAFWET = 3;
   */
  LEAFWET = 3,

  /**
   * pellet
   *
   * @generated from enum value: HOP_VARIETY_BASE_FORM_PELLET = 4;
   */
  PELLET = 4,

  /**
   * powder
   *
   * @generated from enum value: HOP_VARIETY_BASE_FORM_POWDER = 5;
   */
  POWDER = 5,

  /**
   * plug
   *
   * @generated from enum value: HOP_VARIETY_BASE_FORM_PLUG = 6;
   */
  PLUG = 6,
}

/**
 * @generated from enum beerproto.v1.IBUMethodUnit
 */
export declare enum IBUMethodUnit {
  /**
   * @generated from enum value: IBU_METHOD_UNIT_UNSPECIFIED = 0;
   */
  IBU_METHOD_UNIT_UNSPECIFIED = 0,

  /**
   * Rager
   *
   * @generated from enum value: IBU_METHOD_UNIT_RAGER = 1;
   */
  IBU_METHOD_UNIT_RAGER = 1,

  /**
   * Tinseth
   *
   * @generated from enum value: IBU_METHOD_UNIT_TINSETH = 2;
   */
  IBU_METHOD_UNIT_TINSETH = 2,

  /**
   * Garetz
   *
   * @generated from enum value: IBU_METHOD_UNIT_GARETZ = 3;
   */
  IBU_METHOD_UNIT_GARETZ = 3,

  /**
   * Other
   *
   * @generated from enum value: IBU_METHOD_UNIT_OTHER = 4;
   */
  IBU_METHOD_UNIT_OTHER = 4,
}

/**
 * VarietyInformation collects the attributes of a hop variety to store as record information
 *
 * @generated from message beerproto.v1.VarietyInformation
 */
export declare class VarietyInformation extends Message<VarietyInformation> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: beerproto.v1.HopInventoryType inventory = 2;
   */
  inventory?: HopInventoryType;

  /**
   * @generated from field: beerproto.v1.VarietyInformationType type = 3;
   */
  type: VarietyInformationType;

  /**
   * Oil Content information object.
   *
   * @generated from field: beerproto.v1.OilContentType oil_content = 4;
   */
  oilContent?: OilContentType;

  /**
   *  Defined as the percentage of hop alpha lost in 6 months of storage.
   *
   * @generated from field: beerproto.v1.PercentType percent_lost = 5;
   */
  percentLost?: PercentType;

  /**
   * @generated from field: string product_id = 6;
   */
  productId: string;

  /**
   * @generated from field: beerproto.v1.PercentType alpha_acid = 7;
   */
  alphaAcid?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType beta_acid = 8;
   */
  betaAcid?: PercentType;

  /**
   * @generated from field: string name = 9;
   */
  name: string;

  /**
   * @generated from field: string origin = 10;
   */
  origin: string;

  /**
   * @generated from field: string substitutes = 11;
   */
  substitutes: string;

  /**
   * @generated from field: string year = 12;
   */
  year: string;

  /**
   * @generated from field: beerproto.v1.HopVarietyBaseForm form = 13;
   */
  form: HopVarietyBaseForm;

  /**
   * @generated from field: string producer = 14;
   */
  producer: string;

  /**
   * @generated from field: string notes = 15;
   */
  notes: string;

  constructor(data?: PartialMessage<VarietyInformation>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.VarietyInformation";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VarietyInformation;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VarietyInformation;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VarietyInformation;

  static equals(a: VarietyInformation | PlainMessage<VarietyInformation> | undefined, b: VarietyInformation | PlainMessage<VarietyInformation> | undefined): boolean;
}

/**
 * HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bill.
 *
 * @generated from message beerproto.v1.HopAdditionType
 */
export declare class HopAdditionType extends Message<HopAdditionType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: beerproto.v1.PercentType beta_acid = 2;
   */
  betaAcid?: PercentType;

  /**
   * @generated from field: string producer = 3;
   */
  producer: string;

  /**
   * @generated from field: string origin = 4;
   */
  origin: string;

  /**
   * @generated from field: string year = 5;
   */
  year: string;

  /**
   * @generated from field: beerproto.v1.HopVarietyBaseForm form = 6;
   */
  form: HopVarietyBaseForm;

  /**
   * The timing object fully describes the timing of an addition with options for a basis on time, gravity, or pH at any process step
   *
   * @generated from field: beerproto.v1.TimingType timing = 7;
   */
  timing?: TimingType;

  /**
   * @generated from field: string name = 8;
   */
  name: string;

  /**
   * @generated from field: string product_id = 9;
   */
  productId: string;

  /**
   * @generated from field: beerproto.v1.PercentType alpha_acid = 10;
   */
  alphaAcid?: PercentType;

  /**
   * @generated from oneof beerproto.v1.HopAdditionType.amount
   */
  amount: {
    /**
     * @generated from field: beerproto.v1.MassType mass = 11;
     */
    value: MassType;
    case: "mass";
  } | {
    /**
     * @generated from field: beerproto.v1.VolumeType volume = 12;
     */
    value: VolumeType;
    case: "volume";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<HopAdditionType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.HopAdditionType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HopAdditionType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HopAdditionType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HopAdditionType;

  static equals(a: HopAdditionType | PlainMessage<HopAdditionType> | undefined, b: HopAdditionType | PlainMessage<HopAdditionType> | undefined): boolean;
}

/**
 * Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency
 *
 * @generated from message beerproto.v1.IBUEstimateType
 */
export declare class IBUEstimateType extends Message<IBUEstimateType> {
  /**
   * @generated from field: beerproto.v1.IBUMethodUnit method = 1;
   */
  method: IBUMethodUnit;

  constructor(data?: PartialMessage<IBUEstimateType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.IBUEstimateType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IBUEstimateType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IBUEstimateType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IBUEstimateType;

  static equals(a: IBUEstimateType | PlainMessage<IBUEstimateType> | undefined, b: IBUEstimateType | PlainMessage<IBUEstimateType> | undefined): boolean;
}

/**
 * oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement
 *
 * @generated from message beerproto.v1.OilContentType
 */
export declare class OilContentType extends Message<OilContentType> {
  /**
   * @generated from field: beerproto.v1.PercentType polyphenols = 1;
   */
  polyphenols?: PercentType;

  /**
   * The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
   *
   * @generated from field: double total_oil_ml_per_100g = 2;
   */
  totalOilMlPer100g: number;

  /**
   * @generated from field: beerproto.v1.PercentType farnesene = 3;
   */
  farnesene?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType limonene = 4;
   */
  limonene?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType nerol = 5;
   */
  nerol?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType geraniol = 6;
   */
  geraniol?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType b_pinene = 7;
   */
  bPinene?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType linalool = 8;
   */
  linalool?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType caryophyllene = 9;
   */
  caryophyllene?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType cohumulone = 10;
   */
  cohumulone?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType xanthohumol = 11;
   */
  xanthohumol?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType humulene = 12;
   */
  humulene?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType myrcene = 13;
   */
  myrcene?: PercentType;

  /**
   * @generated from field: beerproto.v1.PercentType pinene = 14;
   */
  pinene?: PercentType;

  constructor(data?: PartialMessage<OilContentType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.OilContentType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OilContentType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OilContentType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OilContentType;

  static equals(a: OilContentType | PlainMessage<OilContentType> | undefined, b: OilContentType | PlainMessage<OilContentType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.HopInventoryType
 */
export declare class HopInventoryType extends Message<HopInventoryType> {
  /**
   * @generated from oneof beerproto.v1.HopInventoryType.amount
   */
  amount: {
    /**
     * @generated from field: beerproto.v1.MassType mass = 1;
     */
    value: MassType;
    case: "mass";
  } | {
    /**
     * @generated from field: beerproto.v1.VolumeType volume = 2;
     */
    value: VolumeType;
    case: "volume";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<HopInventoryType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.HopInventoryType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HopInventoryType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HopInventoryType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HopInventoryType;

  static equals(a: HopInventoryType | PlainMessage<HopInventoryType> | undefined, b: HopInventoryType | PlainMessage<HopInventoryType> | undefined): boolean;
}

