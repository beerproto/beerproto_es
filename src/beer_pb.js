//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.3.1
// @generated from file beerproto/v1/beer.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { MashProcedureType } from "./mash_pb.js";
import { RecipeType } from "./recipe_pb.js";
import { MiscellaneousType } from "./misc_pb.js";
import { StyleType } from "./style_pb.js";
import { FermentationProcedureType } from "./fermentation_pb.js";
import { BoilProcedureType } from "./boil_pb.js";
import { FermentableType } from "./fermentable_pb.js";
import { CultureInformation } from "./culture_pb.js";
import { EquipmentType } from "./equipment_pb.js";
import { PackagingProcedureType } from "./packaging_pb.js";
import { VarietyInformation } from "./hop_pb.js";
import { WaterBase } from "./water_pb.js";

/**
 * @generated from message beerproto.v1.Recipe
 */
export const Recipe = proto3.makeMessageType(
  "beerproto.v1.Recipe",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mashes", kind: "message", T: MashProcedureType, repeated: true },
    { no: 3, name: "recipes", kind: "message", T: RecipeType, repeated: true },
    { no: 4, name: "miscellaneous_ingredients", kind: "message", T: MiscellaneousType, repeated: true },
    { no: 5, name: "styles", kind: "message", T: StyleType, repeated: true },
    { no: 6, name: "fermentations", kind: "message", T: FermentationProcedureType, repeated: true },
    { no: 7, name: "boil", kind: "message", T: BoilProcedureType, repeated: true },
    { no: 8, name: "version", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "fermentables", kind: "message", T: FermentableType, repeated: true },
    { no: 10, name: "cultures", kind: "message", T: CultureInformation, repeated: true },
    { no: 11, name: "equipments", kind: "message", T: EquipmentType, repeated: true },
    { no: 12, name: "packaging", kind: "message", T: PackagingProcedureType, repeated: true },
    { no: 13, name: "hop_varieties", kind: "message", T: VarietyInformation, repeated: true },
    { no: 14, name: "profiles", kind: "message", T: WaterBase, repeated: true },
  ],
);

