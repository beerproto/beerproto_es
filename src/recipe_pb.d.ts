//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.9.0
// @generated from file beerproto/v1/recipe.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { RecipeStyleType } from "./style_pb.js";
import type { HopAdditionType, IBUEstimateType } from "./hop_pb.js";
import type { AcidityType, ColorType, GravityType, PercentType, VolumeType } from "./measureable_units_pb.js";
import type { FermentationProcedureType } from "./fermentation_pb.js";
import type { MashProcedureType } from "./mash_pb.js";
import type { PackagingProcedureType } from "./packaging_pb.js";
import type { BoilProcedureType } from "./boil_pb.js";
import type { MiscellaneousAdditionType } from "./misc_pb.js";
import type { CultureAdditionType } from "./culture_pb.js";
import type { WaterAdditionType } from "./water_pb.js";
import type { FermentableAdditionType } from "./fermentable_pb.js";

/**
 * @generated from enum beerproto.v1.RecipeUnit
 */
export declare enum RecipeUnit {
  /**
   * @generated from enum value: RECIPE_UNIT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * cider
   *
   * @generated from enum value: RECIPE_UNIT_CIDER = 1;
   */
  CIDER = 1,

  /**
   * kombucha
   *
   * @generated from enum value: RECIPE_UNIT_KOMBUCHA = 2;
   */
  KOMBUCHA = 2,

  /**
   * soda
   *
   * @generated from enum value: RECIPE_UNIT_SODA = 3;
   */
  SODA = 3,

  /**
   * other
   *
   * @generated from enum value: RECIPE_UNIT_OTHER = 4;
   */
  OTHER = 4,

  /**
   * mead
   *
   * @generated from enum value: RECIPE_UNIT_MEAD = 5;
   */
  MEAD = 5,

  /**
   * wine
   *
   * @generated from enum value: RECIPE_UNIT_WINE = 6;
   */
  WINE = 6,

  /**
   * extract
   *
   * @generated from enum value: RECIPE_UNIT_EXTRACT = 7;
   */
  EXTRACT = 7,

  /**
   * partial mash
   *
   * @generated from enum value: RECIPE_UNIT_PARTIAL_MASH = 8;
   */
  PARTIAL_MASH = 8,

  /**
   * all grain
   *
   * @generated from enum value: RECIPE_UNIT_ALL_GRAIN = 9;
   */
  ALL_GRAIN = 9,
}

/**
 * RecipeType composes the information stored in a recipe
 *
 * @generated from message beerproto.v1.RecipeType
 */
export declare class RecipeType extends Message<RecipeType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Used to store each efficiency component, including conversion, and brewhouse
   *
   * @generated from field: beerproto.v1.EfficiencyType efficiency = 2;
   */
  efficiency?: EfficiencyType;

  /**
   * @generated from field: beerproto.v1.RecipeStyleType style = 3;
   */
  style?: RecipeStyleType;

  /**
   * Used to differentiate the which IBU formula is being used in a recipe. If the formula is modified in any way, e.g. to support whirlpool/flameout additions, then please use `Other` for transparency
   *
   * @generated from field: beerproto.v1.IBUEstimateType ibu_estimate = 4;
   */
  ibuEstimate?: IBUEstimateType;

  /**
   * The color of the finished beer, using SRM or EBC
   *
   * @generated from field: beerproto.v1.ColorType color_estimate = 5;
   */
  colorEstimate?: ColorType;

  /**
   * The final beer pH at the end of fermentation
   *
   * @generated from field: beerproto.v1.AcidityType beer_ph = 6;
   */
  beerPh?: AcidityType;

  /**
   * @generated from field: string name = 7;
   */
  name: string;

  /**
   * @generated from field: beerproto.v1.RecipeUnit type = 8;
   */
  type: RecipeUnit;

  /**
   * @generated from field: string coauthor = 9;
   */
  coauthor: string;

  /**
   * The gravity of wort when transffered to the fermenter
   *
   * @generated from field: beerproto.v1.GravityType original_gravity = 10;
   */
  originalGravity?: GravityType;

  /**
   * The gravity of beer at the end of fermentation
   *
   * @generated from field: beerproto.v1.GravityType final_gravity = 11;
   */
  finalGravity?: GravityType;

  /**
   * The final carbonation of the beer when packaged or served
   *
   * @generated from field: double carbonation = 12;
   */
  carbonation: number;

  /**
   * FermentationProcedureType defines the procedure for performing fermentation
   *
   * @generated from field: beerproto.v1.FermentationProcedureType fermentation = 13;
   */
  fermentation?: FermentationProcedureType;

  /**
   * @generated from field: string author = 14;
   */
  author: string;

  /**
   * A collection of all ingredients used for the recipe
   *
   * @generated from field: beerproto.v1.IngredientsType ingredients = 15;
   */
  ingredients?: IngredientsType;

  /**
   * This defines the procedure for performing unique mashing processes
   *
   * @generated from field: beerproto.v1.MashProcedureType mash = 16;
   */
  mash?: MashProcedureType;

  /**
   * Describes the procedure for packaging your beverage
   *
   * @generated from field: beerproto.v1.PackagingProcedureType packaging = 17;
   */
  packaging?: PackagingProcedureType;

  /**
   * Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil
   *
   * @generated from field: beerproto.v1.BoilProcedureType boil = 18;
   */
  boil?: BoilProcedureType;

  /**
   * Used to store subjective tasting notes, and rating
   *
   * @generated from field: beerproto.v1.TasteType taste = 19;
   */
  taste?: TasteType;

  /**
   * @generated from field: double calories_per_pint = 20;
   */
  caloriesPerPint: number;

  /**
   * @generated from field: string created = 21;
   */
  created: string;

  /**
   * The volume into the fermenter
   *
   * @generated from field: beerproto.v1.VolumeType batch_size = 22;
   */
  batchSize?: VolumeType;

  /**
   * @generated from field: string notes = 23;
   */
  notes: string;

  /**
   * @generated from field: beerproto.v1.PercentType alcohol_by_volume = 24;
   */
  alcoholByVolume?: PercentType;

  /**
   * The total apparent attenuation of the finished beer after fermentation
   *
   * @generated from field: beerproto.v1.PercentType apparent_attenuation = 25;
   */
  apparentAttenuation?: PercentType;

  constructor(data?: PartialMessage<RecipeType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.RecipeType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RecipeType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RecipeType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RecipeType;

  static equals(a: RecipeType | PlainMessage<RecipeType> | undefined, b: RecipeType | PlainMessage<RecipeType> | undefined): boolean;
}

/**
 * The efficiencyType stores each efficiency component
 *
 * @generated from message beerproto.v1.EfficiencyType
 */
export declare class EfficiencyType extends Message<EfficiencyType> {
  /**
   * The percentage of sugar from the grain yield that is extracted and converted during the mash
   *
   * @generated from field: beerproto.v1.PercentType conversion = 1;
   */
  conversion?: PercentType;

  /**
   * The percentage of sugar that makes it from the mash tun to the kettle
   *
   * @generated from field: beerproto.v1.PercentType lauter = 2;
   */
  lauter?: PercentType;

  /**
   * The percentage of sugar that makes it from the grain to the kettle
   *
   * @generated from field: beerproto.v1.PercentType mash = 3;
   */
  mash?: PercentType;

  /**
   * The percentage of sugar that makes it from the grain to the fermenter
   *
   * @generated from field: beerproto.v1.PercentType brewhouse = 4;
   */
  brewhouse?: PercentType;

  constructor(data?: PartialMessage<EfficiencyType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.EfficiencyType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EfficiencyType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EfficiencyType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EfficiencyType;

  static equals(a: EfficiencyType | PlainMessage<EfficiencyType> | undefined, b: EfficiencyType | PlainMessage<EfficiencyType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.IngredientsType
 */
export declare class IngredientsType extends Message<IngredientsType> {
  /**
   * miscellaneous_additions collects all the miscellaneous items for use in a recipe
   *
   * @generated from field: repeated beerproto.v1.MiscellaneousAdditionType miscellaneous_additions = 1;
   */
  miscellaneousAdditions: MiscellaneousAdditionType[];

  /**
   * culture_additions collects all the culture items for use in a recipe
   *
   * @generated from field: repeated beerproto.v1.CultureAdditionType culture_additions = 2;
   */
  cultureAdditions: CultureAdditionType[];

  /**
   * water_additions collects all the water items for use in a recipe
   *
   * @generated from field: repeated beerproto.v1.WaterAdditionType water_additions = 3;
   */
  waterAdditions: WaterAdditionType[];

  /**
   * fermentable_additions collects all the fermentable ingredients for use in a recipe
   *
   * @generated from field: repeated beerproto.v1.FermentableAdditionType fermentable_additions = 4;
   */
  fermentableAdditions: FermentableAdditionType[];

  /**
   * hop_additions collects all the hops for use in a recipe
   *
   * @generated from field: repeated beerproto.v1.HopAdditionType hop_additions = 5;
   */
  hopAdditions: HopAdditionType[];

  constructor(data?: PartialMessage<IngredientsType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.IngredientsType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IngredientsType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IngredientsType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IngredientsType;

  static equals(a: IngredientsType | PlainMessage<IngredientsType> | undefined, b: IngredientsType | PlainMessage<IngredientsType> | undefined): boolean;
}

/**
 * @generated from message beerproto.v1.TasteType
 */
export declare class TasteType extends Message<TasteType> {
  /**
   * @generated from field: string notes = 1;
   */
  notes: string;

  /**
   * @generated from field: double rating = 2;
   */
  rating: number;

  constructor(data?: PartialMessage<TasteType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.TasteType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TasteType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TasteType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TasteType;

  static equals(a: TasteType | PlainMessage<TasteType> | undefined, b: TasteType | PlainMessage<TasteType> | undefined): boolean;
}

