//*
// BeerProto
//
// Another beer format, written in protocol buffer.
//
// Copyright (c) 2020 Ross Merrigan

// @generated by protoc-gen-es v1.9.0
// @generated from file beerproto/v1/equipment.proto (package beerproto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { MassType, PercentType, SpecificHeatType, SpecificVolumeType, VolumeType } from "./measureable_units_pb.js";

/**
 * @generated from enum beerproto.v1.EquipmentBaseForm
 */
export declare enum EquipmentBaseForm {
  /**
   * @generated from enum value: EQUIPMENT_BASE_FORM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * HLT
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_HLT = 1;
   */
  HLT = 1,

  /**
   * Mash Tun
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_MASH_TUN = 2;
   */
  MASH_TUN = 2,

  /**
   * Lauter Tun
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_LAUTER_TUN = 3;
   */
  LAUTER_TUN = 3,

  /**
   * Brew Kettle
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_BREW_KETTLE = 4;
   */
  BREW_KETTLE = 4,

  /**
   * Fermenter
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_FERMENTER = 5;
   */
  FERMENTER = 5,

  /**
   * Aging Vessel
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_AGING_VESSEL = 6;
   */
  AGING_VESSEL = 6,

  /**
   * Packaging Vessel
   *
   * @generated from enum value: EQUIPMENT_BASE_FORM_PACKAGING_VESSEL = 7;
   */
  PACKAGING_VESSEL = 7,
}

/**
 * EquipmentType provides necessary information for individual brewing equipment
 *
 * @generated from message beerproto.v1.EquipmentItemType
 */
export declare class EquipmentItemType extends Message<EquipmentItemType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string notes = 2;
   */
  notes: string;

  /**
   * The volume boiled off during 1 hour, measured before and after at room temperature.
   *
   * @generated from field: beerproto.v1.VolumeType boil_rate_per_hour = 3;
   */
  boilRatePerHour?: VolumeType;

  /**
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * @generated from field: beerproto.v1.EquipmentBaseForm form = 5;
   */
  form: EquipmentBaseForm;

  /**
   * The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
   *
   * @generated from field: beerproto.v1.VolumeType drain_rate_per_minute = 6;
   */
  drainRatePerMinute?: VolumeType;

  /**
   * The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
   *
   * @generated from field: beerproto.v1.SpecificHeatType specific_heat = 7;
   */
  specificHeat?: SpecificHeatType;

  /**
   * The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
   *
   * @generated from field: beerproto.v1.SpecificVolumeType grain_absorption_rate = 8;
   */
  grainAbsorptionRate?: SpecificVolumeType;

  /**
   * @generated from field: string name = 9;
   */
  name: string;

  /**
   * @generated from field: beerproto.v1.VolumeType maximum_volume = 10;
   */
  maximumVolume?: VolumeType;

  /**
   * The weight of the piece of equipment, especially important for when the mashtun is not preheated.
   *
   * @generated from field: beerproto.v1.MassType weight = 11;
   */
  weight?: MassType;

  /**
   * @generated from field: beerproto.v1.VolumeType loss = 12;
   */
  loss?: VolumeType;

  /**
   * @generated from field: beerproto.v1.PercentType efficiency = 13;
   */
  efficiency?: PercentType;

  constructor(data?: PartialMessage<EquipmentItemType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.EquipmentItemType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipmentItemType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipmentItemType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipmentItemType;

  static equals(a: EquipmentItemType | PlainMessage<EquipmentItemType> | undefined, b: EquipmentItemType | PlainMessage<EquipmentItemType> | undefined): boolean;
}

/**
 * Provides necessary information for brewing equipment set
 *
 * @generated from message beerproto.v1.EquipmentType
 */
export declare class EquipmentType extends Message<EquipmentType> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: repeated beerproto.v1.EquipmentItemType equipment_items = 3;
   */
  equipmentItems: EquipmentItemType[];

  /**
   * @generated from field: beerproto.v1.PercentType brewhouse_efficiency = 4;
   */
  brewhouseEfficiency?: PercentType;

  constructor(data?: PartialMessage<EquipmentType>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "beerproto.v1.EquipmentType";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EquipmentType;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EquipmentType;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EquipmentType;

  static equals(a: EquipmentType | PlainMessage<EquipmentType> | undefined, b: EquipmentType | PlainMessage<EquipmentType> | undefined): boolean;
}

